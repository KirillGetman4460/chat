{"version":3,"sources":["App.jsx","index.js"],"names":["App","socket","useRef","useState","connected","setConnected","value","setValue","messages","setMessages","name","setName","sendMessage","a","today","Date","time","getHours","getMinutes","message","id","now","event","current","send","JSON","stringify","className","style","width","height","map","mess","onChange","e","target","onClick","placeholder","WebSocket","onopen","onmessage","parse","data","prev","ReactDOM","render","document","getElementById"],"mappings":"qNA+FeA,EA3FH,WAEV,IAAMC,EAASC,mBAEf,EAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,EAAyBF,mBAAS,IAAlC,mBAAOG,EAAP,KAAaC,EAAb,KAEA,EAA+BJ,mBAAS,IAAxC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEA,EAAuBN,mBAAS,IAAhC,mBAAOO,EAAP,KAAYC,EAAZ,KAoBMC,EAAW,uCAAG,gCAAAC,EAAA,sDACZC,EAAQ,IAAIC,KAEZC,EAHY,UAGFF,EAAMG,WAHJ,YAGkBH,EAAMI,cACpCC,EAAU,CACZT,OACAS,QAASb,EACTc,GAAIL,KAAKM,MACTC,MAAO,UACPN,QAEJf,EAAOsB,QAAQC,KAAKC,KAAKC,UAAUP,IACnCZ,EAAS,IAZS,2CAAH,qDAcjB,OACE,qBAAKoB,UAAU,MAAf,SACGvB,EACD,sBAAKuB,UAAU,sBAAf,UACA,oBAAIA,UAAU,gBAAd,SACE,cAAC,aAAD,CAAYC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,KAAzC,SACGtB,EAASuB,KAAI,SAAAC,GAAI,OACf,6BACkB,eAAfA,EAAKV,MACJ,sBAAKK,UAAU,qBAAf,sFACgBK,EAAKtB,KADrB,yEAGA,sBAAKiB,UAAU,UAAf,UACF,qBAAKA,UAAU,gBAAf,SAA+B,+BAAOK,EAAKb,YACvC,sBAAKQ,UAAU,sBAAf,UACE,qBAAKA,UAAU,qBAAf,SAAqCK,EAAKtB,OAD5C,IAEE,qBAAKiB,UAAU,uBAAf,SAAuCK,EAAKhB,cAT3CgB,EAAKZ,WAkBnB,sBAAKO,UAAU,gBAAf,UACA,0BAAUrB,MAAOA,EAAOqB,UAAU,kBAAkBM,SAAU,SAAAC,GAAC,OAAI3B,EAAS2B,EAAEC,OAAO7B,UACrF,qBAAKqB,UAAU,YAAYS,QAAS,kBAAMxB,KAA1C,SACE,kGAKD,qBAAKe,UAAU,mBAAf,SACA,sBAAKA,UAAU,gBAAf,UACG,0BAAUU,YAAY,8FAAmBV,UAAU,kBAAkBM,SAAU,SAAAC,GAAC,OAAIvB,EAAQuB,EAAEC,OAAO7B,UACrG,qBAAKqB,UAAU,YAAYS,QAAS,kBAnE5CnC,EAAOsB,QAAU,IAAIe,UAAU,uCAE7BrC,EAAOsB,QAAQgB,OAAS,WACpBlC,GAAa,GACb,IAAMc,EAAU,CACZG,MAAO,aACPZ,OACAU,GAAIL,KAAKM,OAEbpB,EAAOsB,QAAQC,KAAKC,KAAKC,UAAUP,UAEvClB,EAAOsB,QAAQiB,UAAY,SAAClB,GAC1B,IAAMH,EAAUM,KAAKgB,MAAMnB,EAAMoB,MACjCjC,GAAY,SAAAkC,GAAI,OAAKxB,GAAL,mBAAiBwB,UAsD7B,SACE,4ECjFdC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4f537032.chunk.js","sourcesContent":["import React,{useState,useRef} from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport './App.css';\n\nconst App = () => {\n\n  const socket = useRef()\n\n  const [connected,setConnected] = useState(false)\n\n  const [value,setValue] = useState('')\n\n  const [messages,setMessages] = useState([])\n\n  const [name,setName] = useState('')\n\n  const connect = () =>{\n    socket.current = new WebSocket('ws://chat-app-kirill.herokuapp.com/')\n    \n      socket.current.onopen = () => {\n          setConnected(true)\n          const message = {\n              event: 'connection',\n              name,\n              id: Date.now()\n          }\n          socket.current.send(JSON.stringify(message))\n      }\n      socket.current.onmessage = (event) => {\n        const message = JSON.parse(event.data)\n        setMessages(prev => [message, ...prev])\n    }\n  }\n\n  const sendMessage = async () => {\n    const today = new Date();\n\n    const time = `${today.getHours()}:${today.getMinutes()}`;\n    const message = {\n        name,\n        message: value,\n        id: Date.now(),\n        event: 'message',\n        time\n    }\n    socket.current.send(JSON.stringify(message));\n    setValue('');\n  }\n  return (\n    <div className=\"app\">\n      {connected ?  \n      <div className=\"form__messange form\">  \n      <ul className=\"message__list\">\n        <Scrollbars style={{ width: 600, height: 400 }}>\n          {messages.map(mess =>\n             <li key={mess.id}>\n               {mess.event === 'connection'\n               ? <div className=\"connection_message\">\n                   Пользователь {mess.name} подключился\n               </div>\n               : <div className=\"message\"> \n               <div className=\"message__user\"><span>{mess.message}</span></div>\n                   <div className=\"message__user__info\">            \n                     <div className=\"message__user-name\">{mess.name}</div>,\n                     <div className=\"message__user__times\">{mess.time}</div>\n                   </div>\n                  \n                  </div>\n              }\n              </li>\n            )}\n        </Scrollbars>        \n       </ul>\n        <div className=\"form__content\">\n        <textarea value={value} className='input__messange' onChange={e => setValue(e.target.value)}></textarea>       \n        <div className=\"form__btn\" onClick={() => sendMessage()}>\n          <span>Отправить</span>\n        </div>\n        </div>   \n      </div>      \n      :\n         <div className=\"form__login form\">\n         <div className=\"form__content\">\n            <textarea placeholder=\"Имя пользователя\" className='input__messange' onChange={e => setName(e.target.value)}></textarea>         \n            <div className=\"form__btn\" onClick={() => connect()}>\n              <span>Войти</span>\n            </div>\n         </div>       \n        </div>\n      }\n         \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}